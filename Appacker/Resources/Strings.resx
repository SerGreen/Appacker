<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnPackText" xml:space="preserve">
    <value>Pack!</value>
  </data>
  <data name="btnPackTextPacking1" xml:space="preserve">
    <value>Packing...</value>
  </data>
  <data name="btnPackTextPacking2" xml:space="preserve">
    <value>Please wait</value>
  </data>
  <data name="cueAppDirPath" xml:space="preserve">
    <value>Drag the application folder here</value>
  </data>
  <data name="cueFileDescription" xml:space="preserve">
    <value>Inherit from the main executable</value>
  </data>
  <data name="cueMainExe" xml:space="preserve">
    <value>Select main executable</value>
  </data>
  <data name="cuePackExePath" xml:space="preserve">
    <value>Save as...</value>
  </data>
  <data name="cuePassword" xml:space="preserve">
    <value>No password</value>
  </data>
  <data name="errorCaption" xml:space="preserve">
    <value>Packing aborted</value>
  </data>
  <data name="errorCode1" xml:space="preserve">
    <value>Arguments are missing.</value>
  </data>
  <data name="errorCode2" xml:space="preserve">
    <value>Unpacker.exe is missing.</value>
  </data>
  <data name="errorCode3" xml:space="preserve">
    <value>Directory with the application is missing.</value>
  </data>
  <data name="errorCode4" xml:space="preserve">
    <value>Main executable is missing inside the application directory.</value>
  </data>
  <data name="errorCode5" xml:space="preserve">
    <value>Package save location is invalid.</value>
  </data>
  <data name="errorCode6" xml:space="preserve">
    <value>File access is denied.</value>
  </data>
  <data name="errorCodeUnknown" xml:space="preserve">
    <value>Unknown error.</value>
  </data>
  <data name="errorText" xml:space="preserve">
    <value>Packing was not performed. Packer has exited with code</value>
  </data>
  <data name="iniDescriptionAppData" xml:space="preserve">
    <value>Settings will load from a file in AppData\Roaming\Appacker.</value>
  </data>
  <data name="iniDescriptionDefault" xml:space="preserve">
    <value>Appacker will load with default settings the next time.</value>
  </data>
  <data name="iniDescriptionLocal" xml:space="preserve">
    <value>Settings will load from the local appacker.ini file.</value>
  </data>
  <data name="labSizeText" xml:space="preserve">
    <value>Estimated package size: </value>
  </data>
  <data name="repackOffDescr" xml:space="preserve">
    <value>When application is closed its files are deleted from a temp folder without saving.
Changes to the app files won't be saved (e.g. app settings).</value>
  </data>
  <data name="repackOnDescr" xml:space="preserve">
    <value>When application is closed all of its files will be packed back and packed .exe will be replaced.
Any changes will be saved (e.g. app settings).</value>
  </data>
  <data name="unpackProgressBarOffDescr" xml:space="preserve">
    <value>No progress bar will appear when launching packed application.
Unadvised for big packages, as it may appear that nothing is happening.</value>
  </data>
  <data name="unpackProgressBarOnDescr" xml:space="preserve">
    <value>When launching packed application, show a splash screen with a progres bar
if unpacking takes longer than 1 second</value>
  </data>
  <data name="windowlessOffDescr" xml:space="preserve">
    <value>You can redirect stdout of a packed application,
BUT unpacker console will appear for a split-second before becoming invisible</value>
  </data>
  <data name="windowlessOnDescr" xml:space="preserve">
    <value>Unpacker daemon is completely invisible,
BUT you can not redirect stdout of a packed application</value>
  </data>
</root>